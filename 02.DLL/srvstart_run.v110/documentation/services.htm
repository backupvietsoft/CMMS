<!--
   --------------------------------------------------------
   This HTML file was generated by mkhtml version 1.1
   Copyright (C) 2000 Nick Rozanski (Nick@Rozanski.com)Distributed under the terms of the GNU General Public License
   source: ./hdl/services.hdl
   date:   2000-08-25_11:12:21
   --------------------------------------------------------
-->

<SCRIPT LANGUAGE=JAVASCRIPT>
headingNumbers = new Array (6 )
appendixNumbers = new Array (6 )
for (var i = 1; i<= 6 ; i++) {
headingNumbers[i] = 0
appendixNumbers[i] = 0
}
tableNumber = 0;
headingPre = new Array ("<HR><FONT FACE=Arial ALT=Helv SIZE=+2 COLOR=Blue><I><B>" ,
						"<FONT FACE=Arial ALT=Helv COLOR=Purple SIZE=+1><B>" ,
						"<FONT FACE=Arial ALT=Helv COLOR=Green><I>" ,
						"<FONT FACE=Arial ALT=Helv COLOR=Brown>" ,
						"" ,
						"" )
headingPost = new Array ("</B></I></FONT>" ,
						"</B></FONT>" ,
						"</I></FONT>" ,
						"</FONT>" ,
						"" ,
						"" )
tablePre = "<FONT FACE=Arial ALT=Helv COLOR=Green><I>" 
tablePost = "</I></FONT>" 
function headStart(level) {
	if (level < headingPre.length) {
		document.write(headingPre[Math.abs(level)-1])
	}
	if ( level >= 0 ) {
		headingNumbers[level] ++;
		for (var i = 1; i<= 6 ; i++) {
			if ( i < level) {
				document.write(headingNumbers[i] + ".")
			}
			else if ( i == level) {
				document.write(headingNumbers[i] + " ")
			}
			else {
				headingNumbers[i] = 0;
			}
		}
	}
}
function headEnd(level) {
	if (level < headingPost.length) {
		document.write(headingPost[Math.abs(level)-1])
	}
}
function appxStart(level) {
	if (level < headingPre.length) {
		document.write(headingPre[Math.abs(level)-1])
	}
	if ( level >= 0 ) {
		headingNumbers[level] ++;
		appendixNumbers[level] ++;
		if ( level == 1) {
			document.write("Appendix ")
		}
		document.write("ABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(appendixNumbers[1]-1));
		if ( level == 1) {
			document.write(": ")
		}
		else {
			document.write(".")
		}
		for (var i = 2; i<= 6 ; i++) {
			if ( i < level) {
				document.write(appendixNumbers[i] + ".")
			}
			else if ( i == level) {
				document.write(appendixNumbers[i] + " ")
			}
			else {
				appendixNumbers[i] = 0;
			}
		}
	}
}
function appxEnd(level) {
	if (level < headingPost.length) {
		document.write(headingPost[Math.abs(level)-1])
	}
}
function tableStart() {
	document.write(tablePre)
	tableNumber ++;
	document.write("Table " + tableNumber + ": ")
}
function tableEnd() {
	document.write(tablePost)
}
</SCRIPT>
<HEAD><TITLE> Programmatic Support for Windows NT Services  </TITLE> 
</HEAD><BODY   _AUTHOR_BACKGR  >    <BR><CENTER> <FONT FACE="serif" SIZE= +4  COLOR="Brown"> <I><B> Programmatic Support for Windows NT Services  </B></I></FONT><HR SIZE=2></CENTER> 
<FONT FACE="serif"> 
<BLOCKQUOTE><FONT SIZE=-1 COLOR=Brown><I>
Note that wherever this document refers to Windows NT,
the comments apply to both Windows NT 4 and Windows 2000,
unless stated otherwise.
</I></FONT></BLOCKQUOTE>
<P>
Windows NT and Windows 2000 provides support for special programs called <I>services</I>.
NT services run in the background, usually without direct user interaction,
often started automatically at some point in the boot process.
They typically run under the special <I>LocalSystem</I>  account
which means that they do not need to be associated with a username and password.
(This also places some security restrictions on what services can do by default.)
<P>
Services are analogous to Unix "daemons," but formalised into the operating system.
This formal role of NT services brings some advantages to the system administrator.
For example, they can be configured to start automatically at various points in the boot process,
or can be controlled - locally or remotely - using <FONT FACE="monospace" SIZE=-1>NET START</FONT> , Control Panel Services or programs such as <A HREF= http://www.drizzle.com/~james   >SrvPanel</A>.
<P>
The downside of this is that ordinary programs will not run as NT services.
A service program needs to establish and maintain contact with the NT
<I>Service Control Manager</I>  (SCM).
This requires special coding endemic to the program:
if a service does not maintain contact with the SCM, NT assumes it has failed and shuts it down.
<P>
As an alternative to writing special code,
the <A HREF= http://www.microsoft.com/prod/books/1318.htm   >Windows NT Resource Kit</A>  provides a utility called <FONT FACE="monospace" SIZE=-1>SRVANY.EXE</FONT>.
<FONT FACE="monospace" SIZE=-1>SRVANY.EXE</FONT>  will start an ordinary program in the context of an NT service.
However it is pretty limited and does not address some of the constraints of NT Services:
<UL><LI>
NT Services run using the default (system) environment and directory.
However often it is necessary to run such programs with their own environment values.
<LI>
There is no facility to automatically restart services which crash (as per Unix <FONT FACE="monospace" SIZE=-1>init</FONT>).
<LI>
<FONT FACE="monospace" SIZE=-1>SRVANY.EXE</FONT>  is crude in its handling of service startup and shutdown.
It assumes that the program is running as soon as it starts,
and has no way to shut down the program other than by terminating it.
</UL>
<P>
Because of these limitations I wrote two utilities, <A HREF= #svc >SVC</A>  and <A HREF= #srvstart >SRVSTART</A>.
<FONT Color=Brown><B>SVC</B></FONT>  allows you to install, modify or remove Windows NT services.
<FONT Color=Brown><B>SRVSTART</B></FONT>  allows you to run executable programs as if they were services.
<P>
Between them they give you far greater management and flexibility than is provided by the Windows NT and the NT Resource Kit.
<!-- =============================================================================================== -->
<A NAME=copyright ><H1 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 1 )</SCRIPT> Copyright and Distribution </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 1 )</SCRIPT></H1 ></A> 
This article is Copyright (C) 2000 Nick Rozanski (<A HREF= mailto:Nick@Rozanski.com   >Nick@Rozanski.com</A>).
<P>
<FONT Color=Brown><B>SVC</B></FONT>  and <FONT Color=Brown><B>SRVSTART</B></FONT>  are  distributed under the terms of the
<A HREF= http://www.gnu.org   >GNU General Public License</A> 
as published by the Free Software Foundation (675 Mass Ave, Cambridge, MA 02139, USA)
They are distributed in the hope that they will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.
<!-- =============================================================================================== -->
<A NAME=effectivity ><H1 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 1 )</SCRIPT> Effectivity </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 1 )</SCRIPT></H1 ></A> 
This article applies to the following versions of software:
<CENTER><P><TABLE BORDER=1><CAPTION ALIGN=bottom><A NAME=# effectivity >	<SCRIPT LANGUAGE=JAVASCRIPT>tableStart()</SCRIPT> Effectivity </A>	<SCRIPT LANGUAGE=JAVASCRIPT>tableEnd()</SCRIPT></A></CAPTION> 
<TH ALIGN=LEFT>Software<TH ALIGN=LEFT>Version<TH ALIGN=LEFT>Platform<TR>
<TD VALIGN=TOP> <FONT Color=Brown><B>SVC</B></FONT> <TD VALIGN=TOP>1.0<TD VALIGN=TOP>Windows NT 4 (Service Pack 4+)<BR>Windows 2000 (1st Release)<TR>
<TD VALIGN=TOP> <FONT Color=Brown><B>SRVSTART</B></FONT> <TD VALIGN=TOP>2.1<TD VALIGN=TOP>Windows NT 4 (Service Pack 4+)<BR>Windows 2000 (1st Release)<TR>
</TABLE></CENTER><BR CLEAR=ALL> 
<P>
You can check the version of the <FONT Color=Brown><B>SRVSTART</B></FONT>  DLL or executable by running the following shell command against it (<FONT COLOR=Purple>new in version  2.1</FONT>):
<FONT FACE="monospace"><BLOCKQUOTE><PRE> 
find "***" srvstart.dll
find "***" srvstart.exe
</PRE></BLOCKQUOTE></FONT> 
You will see output similar to the following:
<FONT FACE="monospace"><BLOCKQUOTE><PRE> 
*** SRVSTART version 1.10 Copyright (C) 1998 - 2000 Nick Rozanski (Nick@Rozanski.com)
</PRE></BLOCKQUOTE></FONT> 
<P>
<FONT Color=Brown><B>SRVSTART</B></FONT>  is a rewrite (in C++) of an earlier version of the program called <FONT FACE="monospace" SIZE=-1>SYBSTART</FONT>.
The new version contains a number of enhancements and extra features.
<!-- =============================================================================================== -->
<A NAME=svc ><H1 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 1 )</SCRIPT> SVC.EXE - Windows NT Service Management </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 1 )</SCRIPT></H1 ></A> 
<FONT Color=Brown><B>SVC</B></FONT>  is a simple command-line utility which allows you to install, modify or remove Windows NT Services
<!-- ---------------------------------------------- -->
<A NAME=svc_pre ><H2 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 2 )</SCRIPT> Pre-Requisites </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 2 )</SCRIPT></H2 ></A> 
<FONT Color=Brown><B>SVC</B></FONT>  runs on Windows NT (not 95 or 98).
To run it you require the following files somewhere in your PATH.
<UL>
<LI> <FONT FACE="monospace" SIZE=-1>svc.exe</FONT>  - <FONT Color=Brown><B>SVC</B></FONT>  executable
<LI> <FONT FACE="monospace" SIZE=-1>msvcrt.dll</FONT>  - Microsoft C++ run-time library
</UL>
Both of these components are available from <A HREF= http://www.Nick.Rozanski.com/software.htm      >my website</A>.
<!-- ---------------------------------------------- -->
<A NAME=svc_synopsis ><H2 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 2 )</SCRIPT> Synopsis </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 2 )</SCRIPT></H2 ></A> 
To run <FONT Color=Brown><B>SVC</B></FONT>, type <FONT FACE="monospace" SIZE=-1>svc.exe</FONT>  at a console prompt.
<!-- ---------------------------------------------- -->
<A NAME=srvstart_operation ><H2 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 2 )</SCRIPT> Operation </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 2 )</SCRIPT></H2 ></A> 
<FONT Color=Brown><B>SVC</B></FONT>  has the following actions:
<UL>
<LI> <FONT FACE="monospace" SIZE=-1>l</FONT>  - list existing services
<LI> <FONT FACE="monospace" SIZE=-1>d</FONT>  - display details of a existing service
<LI> <FONT FACE="monospace" SIZE=-1>i</FONT>  - install a new service
<LI> <FONT FACE="monospace" SIZE=-1>m</FONT>  - modify an existing service
<LI> <FONT FACE="monospace" SIZE=-1>r</FONT>  - remove an existing service.
</UL>
<P>
<FONT Color=Brown><B>SVC</B></FONT>  will prompt you for all responses.
At any point you can type <FONT FACE="monospace" SIZE=-1>?</FONT>  (question mark) for a short explanatory help message.
<P>
If you are having trouble running <FONT Color=Brown><B>SVC</B></FONT>, you can try running <FONT FACE="monospace" SIZE=-1>svc.exe -d</FONT>.
This prints out internal <FONT Color=Brown><B>SVC</B></FONT>  debug messages as it runs.
<P>
If you don't like <FONT Color=Brown><B>SVC</B></FONT>'s command-line interface, I recommend <A HREF= http://www.drizzle.com/~james   >SrvPanel</A>   from Ballard Software.
This is an easy-to-use GUI utility which allows you to install and modify services,
and the latest version has pretty much all the install functionality of <FONT Color=Brown><B>SVC</B></FONT>.
It also has a very nice interface for starting and stopping services individually or in groups.
<!-- ---------------------------------------------- -->
<A NAME=srvstart_restrictions ><H2 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 2 )</SCRIPT> Restrictions </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 2 )</SCRIPT></H2 ></A> 
Because modifying services is a potentially destructive activity,
<FONT Color=Brown><B>SVC</B></FONT>  is deliberately restricted in what it can do.
A service to be installed, modified or removed must have the following characteristics:
<OL>
<LI>It must be a service on the local machine.
<LI>It must be of type <FONT FACE="monospace" SIZE=-1>WIN32_OWN_PROCESS</FONT>  (ie not shared).
<LI>It must be of start type 'automatic,' 'demand' or 'disabled'.
</OL>
These restrictions are present for your own safety!
<!-- ---------------------------------------------- -->
<A NAME=svc_warning ><H2 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 2 )</SCRIPT> Warning </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 2 )</SCRIPT></H2 ></A> 
<B>Modify Windows NT service settings at your own peril.</B>
<P>
Making incorrect changes can render Windows NT unuseable.
<P>
If you don't know what you are doing, don't mess about with services!
<!-- ---------------------------------------------- -->
<A NAME=svc_hist ><H2 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 2 )</SCRIPT> Version History </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 2 )</SCRIPT></H2 ></A> 
<P><FONT COLOR=Green><B>Version  1.0  ( 30 June 1998 )</B></FONT><P> 
First release version.
<!-- =============================================================================================== -->
<A NAME=srvstart ><H1 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 1 )</SCRIPT> SRVSTART.EXE - Windows NT Service Execution </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 1 )</SCRIPT></H1 ></A> 
<FONT Color=Brown><B>SRVSTART</B></FONT>  is a Win32 executable and DLL which allows you to run commands as if they were Windows NT services.
It also has some features to enhance the running of ordinary console commands (prompting for parameters etc).
<P>
You can also use <FONT Color=Brown><B>SRVSTART</B></FONT>  to install or remove a service which is based on the <FONT FACE="monospace" SIZE=-1>SRVSTART.EXE</FONT>  executable
(<FONT COLOR=Purple>new in version  1.1</FONT>).
<!-- ---------------------------------------------- -->
<A NAME=srvstart_pre ><H2 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 2 )</SCRIPT> Pre-Requisites </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 2 )</SCRIPT></H2 ></A> 
<FONT Color=Brown><B>SRVSTART</B></FONT>  runs on Windows NT.
(Additionally, you can run <FONT Color=Brown><B>SRVSTART</B></FONT>  in <B>command mode only</B> on Windows 95/98.) 
To run it you require the following files somewhere in your PATH.
<UL>
<LI> <FONT FACE="monospace" SIZE=-1>srvstart.exe</FONT>  - <FONT Color=Brown><B>SRVSTART</B></FONT>  executable
<LI> <FONT FACE="monospace" SIZE=-1>srvstart.dll</FONT>  - <FONT Color=Brown><B>SRVSTART</B></FONT>  library
<LI> <FONT FACE="monospace" SIZE=-1>logger.dll</FONT>  - logger library
<LI> <FONT FACE="monospace" SIZE=-1>msvcrt.dll</FONT>  - Microsoft C++ run-time library
</UL>
All of these components are available from <A HREF= http://www.Nick.Rozanski.com/software.htm      >my website</A>.
<!-- ---------------------------------------------- -->
<A NAME=srvstart_synopsis ><H2 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 2 )</SCRIPT> Synopsis </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 2 )</SCRIPT></H2 ></A> 
At run time, <FONT Color=Brown><B>SRVSTART</B></FONT>  operates in one of two modes.
<UL><LI>
It can be used to run an ordinary command (executable program batch file).
In this <A HREF= #srvstart_synopsis_cmd ><I>command mode</I></A>,
<FONT Color=Brown><B>SRVSTART</B></FONT>  can prompt the user for the values of command-line parameters such as passwords.
<LI>
It can be used to run an executable program in the context of a Windows NT service
(<A HREF= #srvstart_synopsis_svc ><I>service mode</I></A>).
<FONT Color=Brown><B>SRVSTART</B></FONT>  will itself handle all of the interactions with the NT Service Control Manager (SCM).
It is not necessary for the program to include any service management code.
</UL>
Support for installing and removing services is described
<A HREF= #srvstart_installremove >later</A>.
<!-- ---------------------------------------------- -->
<A NAME=srvstart_synopsis_cmd ><H3 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 3 )</SCRIPT> Command Mode </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 3 )</SCRIPT></H3 ></A> 
Use the following syntax to run a program in command mode.
<FONT FACE="monospace"><BLOCKQUOTE><PRE> 
srvstart cmd <I>window_title</I> [ <I>options ...</I> ] <I>program</I> [ <I>program_parameters ...</I> ]
</PRE></BLOCKQUOTE></FONT> 
<UL>
<LI>The <FONT FACE="monospace" SIZE=-1>cmd</FONT>  keyword tells <FONT Color=Brown><B>SRVSTART</B></FONT>  that this is command mode.
<LI> <FONT FACE="monospace" SIZE=-1><I>window_title</I></FONT>  will be displayed (in most cases) in the window's title bar when the command runs.
Enclose it in quotes if it contains spaces.
<LI> <FONT FACE="monospace" SIZE=-1><I>program</I></FONT>  and <FONT FACE="monospace" SIZE=-1><I>program_parameters ...</I></FONT>  define the command to run.
<LI>The <FONT FACE="monospace" SIZE=-1><I>options</I></FONT>  are defined <A HREF= #srvstart_options >below</A>.
</UL>
<!-- ---------------------------------------------- -->
<A NAME=srvstart_synopsis_svc ><H3 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 3 )</SCRIPT> Service Mode </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 3 )</SCRIPT></H3 ></A> 
Use the following syntax to run a program in service mode.
<FONT FACE="monospace"><BLOCKQUOTE><PRE> 
srvstart [ svc ] <I>service_name</I> [ <I>options ...</I> ] <I>program</I> [ <I>program_parameters ...</I> ]
</PRE></BLOCKQUOTE></FONT> 
<UL>
<LI>The <FONT FACE="monospace" SIZE=-1>svc</FONT>  keyword tells <FONT Color=Brown><B>SRVSTART</B></FONT>  that this is service mode.
This keyword is optional (<FONT COLOR=Purple>new in version  1.1</FONT>).
<LI> <FONT FACE="monospace" SIZE=-1><I>service_name</I></FONT>  is the short (internal) name of the service.
(You will have defined this when you installed the service using <FONT Color=Brown><B>SVC</B></FONT>.)
<LI> <FONT FACE="monospace" SIZE=-1><I>program</I></FONT>  and <FONT FACE="monospace" SIZE=-1><I>program_parameters ...</I></FONT>  define the command to run.
<LI>The <FONT FACE="monospace" SIZE=-1><I>options</I></FONT>  are defined <A HREF= #srvstart_options >below</A>.
</UL>
<!-- ---------------------------------------------- -->
<A NAME=srvstart_operation_note ><H4 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 4 )</SCRIPT> Note </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 4 )</SCRIPT></H4 ></A> 
The <FONT FACE="monospace" SIZE=-1>svc</FONT>  syntax is never entered at the command line.
Rather, use this syntax as the command line when installing a service
(eg in response to <FONT Color=Brown><B>SVC</B></FONT> 's <FONT FACE="monospace" SIZE=-1>Enter binary path name</FONT>  prompt).
<P>
For testing, you can supply the keyword <FONT FACE="monospace" SIZE=-1>any</FONT>  instead of <FONT FACE="monospace" SIZE=-1>cmd</FONT>  or <FONT FACE="monospace" SIZE=-1>svc</FONT>.
This will attempt to run the program as a service (keyword <FONT FACE="monospace" SIZE=-1>svc</FONT>)
and if this fails run it as a console command (keyword <FONT FACE="monospace" SIZE=-1>cmd</FONT>).
<!-- ---------------------------------------------- -->
<A NAME=srvstart_operation ><H2 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 2 )</SCRIPT> Operation </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 2 )</SCRIPT></H2 ></A> 
<FONT Color=Brown><B>SRVSTART</B></FONT>  does the following.
<OL><LI>
If it is running in service mode, it connects to the SCM.
<LI>
It sets <FONT FACE="monospace" SIZE=-1>%PATH%</FONT> , <FONT FACE="monospace" SIZE=-1>%LIB%</FONT>  and any other environment variables which have been defined in its command line or control file.
<LI>
If it is running in command mode, it optionally prompts the user for input in response to supplied prompts.
<LI>
It starts the command which has been supplied to it.
<LI>
If it is running in service mode, it:
<UL>
<LI>optionally waits to let the started process initialise
<LI>notifies the SCM that the service has started
<LI>waits for requests from the SCM (eg to interrogate or stop the service) and acts on these
<LI>if a "shutdown" request is received, it shuts down the program, and exits
<LI>periodically checks the started command to see if it is still running;
if it has finished, it notifies the SCM that it has stopped, and exits.
</UL>
</OL>
<!-- ---------------------------------------------- -->
<A NAME=srvstart_options ><H2 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 2 )</SCRIPT> Options </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 2 )</SCRIPT></H2 ></A> 
The following srvstart options apply to command and service modes.
<DL> 
<P><DT><FONT FACE="sans-serif" SIZE=-1><B>-c <I>controlfile</I></B></FONT> 
<DD> 
retrieve <FONT Color=Brown><B>SRVSTART</B></FONT>  options from the file <A HREF= #srvstart_ctrl ><FONT FACE="monospace" SIZE=-1><I>controlfile</I></FONT></A> 
<P><DT><FONT FACE="sans-serif" SIZE=-1><B>-d  <I>level</I></B></FONT> 
<DD> 
set the <FONT Color=Brown><B>SRVSTART</B></FONT>  <A HREF= #srvstart_options_dbg >debug level</A>: <FONT FACE="monospace" SIZE=-1>0</FONT> =none, <FONT FACE="monospace" SIZE=-1>1</FONT> =normal, <FONT FACE="monospace" SIZE=-1>2</FONT> =verbose
<P><DT><FONT FACE="sans-serif" SIZE=-1><B>-e <I>var</I>=<I>value</I></B></FONT> 
<DD> 
set the <A HREF= #srvstart_options_env >environment variable</A>  <FONT FACE="monospace" SIZE=-1><I>var</I></FONT>  equal to <FONT FACE="monospace" SIZE=-1><I>value</I></FONT>  before running the program
<P><DT><FONT FACE="sans-serif" SIZE=-1><B>-h</B></FONT> 
<DD> 
display help message to <FONT FACE="monospace" SIZE=-1>stdout</FONT>  and exit
<P><DT><FONT FACE="sans-serif" SIZE=-1><B>-l <I>libdir</I></B></FONT> 
<DD> 
set the value of the <FONT FACE="monospace" SIZE=-1>%LIB%</FONT>  <A HREF= #srvstart_options_env >environment variable</A>  to <FONT FACE="monospace" SIZE=-1><I>libdir</I></FONT> 
<P><DT><FONT FACE="sans-serif" SIZE=-1><B>-o <I>target</I></B></FONT> 
<DD> 
define where <FONT Color=Brown><B>SRVSTART</B></FONT>  will write <A HREF= #srvstart_options_dbg >debug</A>  messages (<FONT FACE="monospace" SIZE=-1>-</FONT> , <FONT FACE="monospace" SIZE=-1>LOG</FONT>  or <FONT FACE="monospace" SIZE=-1><I>pathname</I></FONT>)
<P><DT><FONT FACE="sans-serif" SIZE=-1><B>-p <I>path</I></B></FONT> 
<DD> 
set the value of the <FONT FACE="monospace" SIZE=-1>%PATH%</FONT>  <A HREF= #srvstart_options_env >environment variable</A>  to <FONT FACE="monospace" SIZE=-1><I>path</I></FONT> 
<P><DT><FONT FACE="sans-serif" SIZE=-1><B>-q <I>sybase</I></B></FONT> 
<DD> 
assign a default <FONT FACE="monospace" SIZE=-1>%PATH%</FONT>  based on this value of <FONT FACE="monospace" SIZE=-1><I>sybase</I></FONT> 
instead of value supplied using <FONT FACE="monospace" SIZE=-1>-s</FONT> 
<P><DT><FONT FACE="sans-serif" SIZE=-1><B>-s <I>sybase</I></B></FONT> 
<DD> 
set the value of the <FONT FACE="monospace" SIZE=-1>%SYBASE%</FONT>  <A HREF= #srvstart_options_env >environment variable</A>  to <FONT FACE="monospace" SIZE=-1><I>sybase</I></FONT> 
(equivalent to <FONT FACE="monospace" SIZE=-1>-eSYBASE=<I>sybase</I></FONT> )
<P><DT><FONT FACE="sans-serif" SIZE=-1><B>-x <I>priority</I></B></FONT> 
<DD> 
start the command at the given <A HREF= #srvstart_options_start >execution priority</A> 
(<FONT FACE="monospace" SIZE=-1>idle</FONT>, <FONT FACE="monospace" SIZE=-1>normal</FONT>, <FONT FACE="monospace" SIZE=-1>high</FONT>, <FONT FACE="monospace" SIZE=-1>real</FONT>)
</DL> 
<P>
The following <FONT Color=Brown><B>SRVSTART</B></FONT>  options apply to command mode only.
<DL> 
<P><DT><FONT FACE="sans-serif" SIZE=-1><B>-m</B></FONT> 
<DD> 
start command in minimised new window
<P><DT><FONT FACE="sans-serif" SIZE=-1><B>-w</B></FONT> 
<DD> 
start command in new window
</DL> 
<P>
The following <FONT Color=Brown><B>SRVSTART</B></FONT>  options apply to service mode only.
<DL> 
<P><DT><FONT FACE="sans-serif" SIZE=-1><B>-t <I>seconds</I></B></FONT> 
<DD> 
<A HREF= #srvstart_options_svcmgmt >program status check interval</A>  in seconds
<P><DT><FONT FACE="sans-serif" SIZE=-1><B>-y <I>seconds</I></B></FONT> 
<DD> 
how long <FONT Color=Brown><B>SRVSTART</B></FONT>  waits before <A HREF= #srvstart_options_svcmgmt >reporting</A> 
a "started" status to the NT Service Control Manager
</DL> 
<!-- ---------------------------------------------- -->
<A NAME=srvstart_options_env ><H3 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 3 )</SCRIPT> Environment Options </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 3 )</SCRIPT></H3 ></A> 
Options <FONT FACE="monospace" SIZE=-1>-s</FONT>, <FONT FACE="monospace" SIZE=-1>-p</FONT>, <FONT FACE="monospace" SIZE=-1>-q</FONT>, <FONT FACE="monospace" SIZE=-1>-l</FONT>  and <FONT FACE="monospace" SIZE=-1>-e</FONT> 
control the environment in which the program runs.
<P>
If no <FONT FACE="monospace" SIZE=-1>-p</FONT>  option is given, a default path of the form:
<FONT FACE="monospace"><BLOCKQUOTE><PRE> 
%SYBASE%\install;SYBASE%\bin;%SYBASE%\dll;%SystemRoot%;%SystemRoot%\system32
</PRE></BLOCKQUOTE></FONT> 
is used.
(<FONT FACE="monospace" SIZE=-1>%SystemRoot%</FONT>  is the Windows NT root directory, eg <FONT FACE="monospace" SIZE=-1>C:\WINNT</FONT>.)
<P>
The <FONT FACE="monospace" SIZE=-1>-q</FONT>  option assigns a path as above, but using the value supplied to <FONT FACE="monospace" SIZE=-1>-q</FONT> , instead of <FONT FACE="monospace" SIZE=-1>%SYBASE%</FONT>.
For example, <FONT FACE="monospace" SIZE=-1>-q C:\NEWSYB</FONT>  would assign a path of the form 
<FONT FACE="monospace" SIZE=-1>C:\NEWSYB\install;C:\NEWSYB\bin;...</FONT>  etc.
<P>
Environment values which contain embedded environment variables will have these substituted,
but only if they are already defined.
For example:
<FONT FACE="monospace"><BLOCKQUOTE><PRE> 
... -e myvar1=myvalue1 -e myvar2=my_%myvar1%_val ...
</PRE></BLOCKQUOTE></FONT> 
will set <FONT FACE="monospace" SIZE=-1>myvar1</FONT>  to <FONT FACE="monospace" SIZE=-1>myvalue1</FONT>  and <FONT FACE="monospace" SIZE=-1>myvar2</FONT>  to <FONT FACE="monospace" SIZE=-1>my_myvalue1_val</FONT>.
However
<FONT FACE="monospace"><BLOCKQUOTE><PRE> 
... -e myvar2=my_%myvar1%_val -e myvar1=myvalue1 ...
</PRE></BLOCKQUOTE></FONT> 
will set <FONT FACE="monospace" SIZE=-1>myvar2</FONT>  to <FONT FACE="monospace" SIZE=-1>my_%myvar1%_val</FONT>  (since <FONT FACE="monospace" SIZE=-1>myvar1</FONT>  is not defined at this point).
<P>
Note that in service mode,
the only environment variables available when <FONT Color=Brown><B>SRVSTART</B></FONT>  starts are the <I>system</I> 
environment variables.
(These are the environment variables in the <I>upper</I> list box in In Control Panel|System|Environment.)
If the service is started using a named Windows NT account, then the environment for that account will also available.
<!-- ---------------------------------------------- -->
<A NAME=srvstart_options_dbg ><H3 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 3 )</SCRIPT> Debugging Options </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 3 )</SCRIPT></H3 ></A> 
Options <FONT FACE="monospace" SIZE=-1>-d</FONT>, <FONT FACE="monospace" SIZE=-1>-o</FONT>, and <FONT FACE="monospace" SIZE=-1>-h</FONT>  control srvstart debugging.
<UL>
<LI> <FONT FACE="monospace" SIZE=-1>-d 0</FONT>  prevents any output other than error messages. 
<LI> <FONT FACE="monospace" SIZE=-1>-d 1</FONT>  outputs a few informational messages.
<LI> <FONT FACE="monospace" SIZE=-1>-d 2</FONT>  outputs a large number of debug messages.
</UL>
Note that you must use the Debug executables for level 2
(you can find these in the <FONT FACE="monospace" SIZE=-1>Debug</FONT>  directory of the full distribution).
<P>
<FONT FACE="monospace" SIZE=-1>-o <I>target</I></FONT>  causes debug messages to be sent to <FONT FACE="monospace" SIZE=-1>target</FONT>.
<UL>
<LI>If <FONT FACE="monospace" SIZE=-1>target</FONT>  is <FONT FACE="monospace" SIZE=-1>-</FONT>  (hyphen) messages will go to <FONT FACE="monospace" SIZE=-1>stdout</FONT>.
This does not apply to service mode (messages will just disappear).
<LI>If <FONT FACE="monospace" SIZE=-1>target</FONT>  is <FONT FACE="monospace" SIZE=-1>LOG</FONT>  (uppercase) debug messages will be sent to the Windows NT Event Log.
<LI>Otherwise, <FONT FACE="monospace" SIZE=-1>target</FONT>  is assumed to be a pathname.
Debug messages will be appended to this file.
</UL>
<P>
By default, <FONT Color=Brown><B>SRVSTART</B></FONT>  logs error messages to the Event Log in service mode,
and to <FONT FACE="monospace" SIZE=-1>stdout</FONT>  otherwise.
<P>
<FONT FACE="monospace" SIZE=-1>-h</FONT>  displays help information and exits.
(The other srvstart parameters need not be supplied in this case.)
<!-- ---------------------------------------------- -->
<A NAME=srvstart_options_start ><H3 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 3 )</SCRIPT> Startup Options </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 3 )</SCRIPT></H3 ></A> 
<FONT FACE="monospace" SIZE=-1>-x</FONT>  specifies the priority at which the program should run.
<UL>
<LI> <FONT FACE="monospace" SIZE=-1>idle</FONT>  to run only when the CPU is otherwise idle
<LI> <FONT FACE="monospace" SIZE=-1>normal</FONT>  to run at normal priority
<LI> <FONT FACE="monospace" SIZE=-1>high</FONT>  to run at high priority
<LI> <FONT FACE="monospace" SIZE=-1>real</FONT>  to run at real time priority
</UL>
It is ignored in command mode unless <FONT FACE="monospace" SIZE=-1>-w</FONT>  is supplied.
<P>
In command mode, <FONT FACE="monospace" SIZE=-1>-w</FONT>  opens a new console window to run the program,
and <FONT FACE="monospace" SIZE=-1>-m</FONT>  opens this window minimised.
These options are ignored in service mode.
<!-- ---------------------------------------------- -->
<A NAME=srvstart_options_svcmgmt ><H3 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 3 )</SCRIPT> Service Management Options </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 3 )</SCRIPT></H3 ></A> 
If the <FONT FACE="monospace" SIZE=-1>-y <I>seconds</I></FONT>  option is specified,
<FONT Color=Brown><B>SRVSTART</B></FONT>  waits this number of seconds before reporting to the Windows NT Service Control Manager that the service has started.
Use this option if the command takes a long time to initialise (default zero).
<P>
In service mode, <FONT Color=Brown><B>SRVSTART</B></FONT>  regularly checks the process it has started to see if it is still running.
If it has finished, then <FONT Color=Brown><B>SRVSTART</B></FONT>  reports a "service stopped" status to the Service Control Manager and then exits.
The <FONT FACE="monospace" SIZE=-1>-t <I>seconds</I></FONT>  option defines how often this check is done (default every second).
<!-- ---------------------------------------------- -->
<A NAME=srvstart_ctrl ><H2 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 2 )</SCRIPT> Control File </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 2 )</SCRIPT></H2 ></A> 
<FONT FACE="monospace" SIZE=-1>-c <I>controlfile</I></FONT>  specifies that <FONT Color=Brown><B>SRVSTART</B></FONT>  should get its options from <FONT FACE="monospace" SIZE=-1><I>controlfile</I></FONT>.
<P>
This is a text file with one option per line.
Options are grouped in sections, with the section name
(which is the window or service name) in square brackets.
Options before any section apply to all commands.
<P>
All section lines are of the form <FONT FACE="monospace" SIZE=-1>[<I>service_or_window_name</I>]</FONT>.
All option lines are of the form <FONT FACE="monospace" SIZE=-1><I>keyword</I>=<I>value</I></FONT>.
Blank lines, and comments lines (starting <FONT FACE="monospace" SIZE=-1>#</FONT>) are ignored.
<P>
For example:
<FONT FACE="monospace"><BLOCKQUOTE><PRE> 
# <I>comment</I>
<I>keyword</I>=<I>value</I>
...

[<I>service_or_window_name_1</I>]
<I>keyword</I>=<I>value</I>
<I>keyword</I>=<I>value</I>
...

[<I>service_or_window_name_2</I>]
<I>keyword</I>=<I>value</I>
...
</PRE></BLOCKQUOTE></FONT> 
<FONT Color=Brown><B>SRVSTART</B></FONT>  reads the control file, applying all keywords before the first section.
It then finds the section whose name matches the supplied window or service name,
and applies all keywords in that section.
<P>
When a control file is used,
the <FONT FACE="monospace" SIZE=-1><I>program</I></FONT>  and <FONT FACE="monospace" SIZE=-1><I>program_parameters</I></FONT> 
can be omitted from the command line.
<P>
Note that <FONT Color=Brown><B>SRVSTART</B></FONT>  applies environment variable substitution to all keyword values which are
filenames, pathnames or directories (<FONT COLOR=Purple>new in version  1.1</FONT>).
For this to work, the environment variable must already be defined
(either globally to Windows NT or using the <FONT FACE="monospace" SIZE=-1>env</FONT>  directive)
at the time that the directive is read.
<P>
For example, the directive
<FONT FACE="monospace" SIZE=-1>debug_out=%TEMP%\myservice.out</FONT> 
will log debug output to the file <FONT FACE="monospace" SIZE=-1>myservice.out</FONT>  in the Windows temporary directory
(usually <FONT FACE="monospace" SIZE=-1>C:\TEMP</FONT>).
<!-- ---------------------------------------------- -->
<A NAME=srvstart_ctrl_keyw_cmd ><H3 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 3 )</SCRIPT> Control File Keywords (Command-Line Equivalents) </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 3 )</SCRIPT></H3 ></A> 
The following keywords replace the <FONT Color=Brown><B>SRVSTART</B></FONT>  command-line options.
<DL> 
<P><DT><FONT FACE="sans-serif" SIZE=-1><B>debug=<I>level</I></B></FONT> 
<DD> 
same as <FONT FACE="monospace" SIZE=-1>-d <I>level</I></FONT> 
<P><DT><FONT FACE="sans-serif" SIZE=-1><B>debug_out=<I>target</I></B></FONT> 
<DD> 
same as <FONT FACE="monospace" SIZE=-1>-o <I>target</I></FONT>;
additionally, if <FONT FACE="monospace" SIZE=-1>target</FONT>  is a path name whose first character is <FONT FACE="monospace" SIZE=-1>></FONT>  (greater than),
<FONT Color=Brown><B>SRVSTART</B></FONT>  will truncate the file before writing to it (<FONT COLOR=Purple>new in version  1.1</FONT>)
<P><DT><FONT FACE="sans-serif" SIZE=-1><B>env=<I>var</I>=<I>value</I></B></FONT> 
<DD> 
same as <FONT FACE="monospace" SIZE=-1>-e <I>var</I>=<I>value</I></FONT> 
<P><DT><FONT FACE="sans-serif" SIZE=-1><B>lib=<I>libdir</I></B></FONT> 
<DD> 
same as <FONT FACE="monospace" SIZE=-1>-l <I>libdir</I></FONT> 
<P><DT><FONT FACE="sans-serif" SIZE=-1><B>minimised={y|n}</B></FONT> 
<DD> 
same as <FONT FACE="monospace" SIZE=-1>-m</FONT> 
<P><DT><FONT FACE="sans-serif" SIZE=-1><B>new_window={y|n}</B></FONT> 
<DD> 
same as <FONT FACE="monospace" SIZE=-1>-w</FONT> 
<P><DT><FONT FACE="sans-serif" SIZE=-1><B>path=<I>path</I></B></FONT> 
<DD> 
same as <FONT FACE="monospace" SIZE=-1>-p <I>path</I></FONT> 
<P><DT><FONT FACE="sans-serif" SIZE=-1><B>priority=<I>priority</I></B></FONT> 
<DD> 
same as <FONT FACE="monospace" SIZE=-1>-x <I>priority</I></FONT> 
<P><DT><FONT FACE="sans-serif" SIZE=-1><B>sybase=<I>sybase</I></B></FONT> 
<DD> 
same as <FONT FACE="monospace" SIZE=-1>-s <I>sybase</I></FONT> 
<P><DT><FONT FACE="sans-serif" SIZE=-1><B>sybpath=<I>path</I></B></FONT> 
<DD> 
same as <FONT FACE="monospace" SIZE=-1>-q <I>path</I></FONT> 
<P><DT><FONT FACE="sans-serif" SIZE=-1><B>startup_delay=<I>seconds</I></B></FONT> 
<DD> 
same as <FONT FACE="monospace" SIZE=-1>-y <I>seconds</I></FONT> 
<P><DT><FONT FACE="sans-serif" SIZE=-1><B>wait_time=<I>seconds</I></B></FONT> 
<DD> 
same as <FONT FACE="monospace" SIZE=-1>-t <I>seconds</I></FONT> 
</DL> 
<!-- ---------------------------------------------- -->
<A NAME=srvstart_ctrl_keyw_start ><H3 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 3 )</SCRIPT> Control File Keywords (Startup and Shutdown) </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 3 )</SCRIPT></H3 ></A> 
The following keywords are used to define <FONT Color=Brown><B>SRVSTART</B></FONT>  commands.
Apart from <FONT FACE="monospace" SIZE=-1>startup</FONT>  they have no command-line equivalents.
<DL> 
<P><DT><FONT FACE="sans-serif" SIZE=-1><B>startup=<I>program</I> [ <I>program_parameters ...</I>]</B></FONT> 
<DD> 
This defines the service program command.
It replaces the <FONT FACE="monospace" SIZE=-1><I>program</I></FONT>  and <FONT FACE="monospace" SIZE=-1><I>program_parameters</I></FONT>  which are supplied on the <FONT Color=Brown><B>SRVSTART</B></FONT>  command line.
<P><DT><FONT FACE="sans-serif" SIZE=-1><B>startup_dir=<I>path</I></B></FONT> 
<DD> 
This defines the startup directory.
It should be a full pathname including a drive letter.
<P><DT><FONT FACE="sans-serif" SIZE=-1><B>wait=<I>program</I> [ <I>program_parameters ...</I> ]</B></FONT> 
<DD> 
This defines a command that <FONT Color=Brown><B>SRVSTART</B></FONT>  will run after starting the service program (service mode only).
<P>
This should wait for the service program to enter a "running" state (eg wait for a database server to complete recovery).
It should exit with a status of <FONT FACE="monospace" SIZE=-1>0</FONT>  once the service program is up and running.
It should exit with a non-zero status if the service program has failed or is never going to enter a running status.
Once this command has exited with a status of <FONT FACE="monospace" SIZE=-1>0</FONT>, <FONT Color=Brown><B>SRVSTART</B></FONT>  considers that the service program is running.
<P><DT><FONT FACE="sans-serif" SIZE=-1><B>shutdown_method={kill | command | winmessage}</B></FONT> 
<DD> 
This defines the action that <FONT Color=Brown><B>SRVSTART</B></FONT>  will take to shutdown the service program (service mode only).
<FONT Color=Brown><B>SRVSTART</B></FONT>  will take this action if it receives a "shutdown" request from the SCM
(eg a user runs <FONT FACE="monospace" SIZE=-1>NET STOP</FONT>  or stops the service using Control Panel | Services).
<P><UL>
<LI>For <FONT FACE="monospace" SIZE=-1>shutdown_method=kill</FONT>,
<FONT Color=Brown><B>SRVSTART</B></FONT>  will shut down the service program using the Win32 <FONT FACE="monospace" SIZE=-1>TerminateProcess()</FONT>  API.
<LI>For <FONT FACE="monospace" SIZE=-1>shutdown_method=command</FONT>,
<FONT Color=Brown><B>SRVSTART</B></FONT>  will run the command given by the <A HREF= #shutdowndirective ><FONT FACE="monospace" SIZE=-1>shutdown</FONT>  directive</A>.
<LI>For <FONT FACE="monospace" SIZE=-1>shutdown_method=winmessage</FONT>,
<FONT Color=Brown><B>SRVSTART</B></FONT>  will send a Windows <FONT FACE="monospace" SIZE=-1>CLOSE</FONT>  message to all Windows opened by the service program (<FONT COLOR=Purple>new in version  1.1</FONT>).
</UL>
<P>
<FONT FACE="monospace" SIZE=-1>kill</FONT>  is the default, and this directive can be omitted.
Note that <FONT FACE="monospace" SIZE=-1>kill</FONT>  is equivalent to a Unix <FONT FACE="monospace" SIZE=-1>kill -9</FONT> 
and leaves DLLs in an undefined state (ie it does not call the DLL termination routines).
I have not to date observed any problems with this (but it clearly depends on the program you are shutting down).
<P>
Note also that <FONT FACE="monospace" SIZE=-1>winmessage</FONT>  will not work for Win32 console programs.
<A NAME=#shutdowndirective>
<P><DT><FONT FACE="sans-serif" SIZE=-1><B>shutdown=<I>program</I> [ <I>program_parameters ...</I> ]</B></FONT> 
</A>
<DD> 
This defines a command to shut down the service program (service mode only).
<FONT Color=Brown><B>SRVSTART</B></FONT>  will run this command if it receives a "shutdown" request from the SCM
(eg a user runs <FONT FACE="monospace" SIZE=-1>NET STOP</FONT>  or stops the service using Control Panel | Services).
<P>
If this directive is provided, then <FONT FACE="monospace" SIZE=-1>shutdown_method=command</FONT>  is implied and can be omitted.
<P><DT><FONT FACE="sans-serif" SIZE=-1><B>auto_restart={y|n} <BR> restart_interval=<I>seconds</I></B></FONT> 
<DD> 
If <FONT FACE="monospace" SIZE=-1>auto_restart</FONT>  is set, then <FONT Color=Brown><B>SRVSTART</B></FONT>  will restart the service program if it exits for any reason.
(The assumption here is that the service has crashed.)
If <FONT FACE="monospace" SIZE=-1>restart_interval</FONT>  is defined, then before restarting, <FONT Color=Brown><B>SRVSTART</B></FONT>  will wait <FONT FACE="monospace" SIZE=-1><I>seconds</I></FONT>  seconds.
<P>
<FONT FACE="monospace" SIZE=-1>auto_restart</FONT>  does not, of course, restart the service program if it is stopped by request
(eg <FONT FACE="monospace" SIZE=-1>NET STOP</FONT>  or Control Panel|Services).
<P>
<FONT FACE="monospace" SIZE=-1>auto_restart</FONT>  does not restart the service program if it thinks that Windows NT is shutting down
(<FONT COLOR=Purple>new in version  1.1</FONT>).
Unfortunately it does not appear to be possible to determine this unambiguously.
If you are irritated by services restarting during Windows NT shutdown,
then increase the value of <FONT FACE="monospace" SIZE=-1>restart_interval</FONT>  to, say, a minute.
</DL> 
<!-- ---------------------------------------------- -->
<A NAME=srvstart_ctrl_keyw_drive ><H3 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 3 )</SCRIPT> Control File Keywords (Drive Mappings) </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 3 )</SCRIPT></H3 ></A> 
The following keywords assign drive mappings.
<DL> 
<P><DT><FONT FACE="sans-serif" SIZE=-1><B>network_drive=<I>driveletter</I>=<I>networkpath</I></B></FONT> 
<DD> 
This directive maps the drive <FONT FACE="monospace" SIZE=-1><I>driveletter</I></FONT>  (do not include the colon)
to the network path <FONT FACE="monospace" SIZE=-1><I>networkpath</I></FONT>  (<FONT COLOR=Purple>new in version  1.1</FONT>).
<P>
<FONT FACE="monospace" SIZE=-1><I>networkpath</I></FONT>  should be a full network path including the host name and initial backslashes.
Note that for this to work, the service must be started using a named user
who has the appropriate privileges to access <FONT FACE="monospace" SIZE=-1><I>networkpath</I></FONT> 
(since <FONT FACE="monospace" SIZE=-1>LocalSystem</FONT>  does not have any network privileges).
<P><DT><FONT FACE="sans-serif" SIZE=-1><B>local_drive=<I>driveletter</I>=<I>localpath</I></B></FONT> 
<DD> 
This directive maps the drive <FONT FACE="monospace" SIZE=-1><I>driveletter</I></FONT>  (do not include the colon)
to the local path <FONT FACE="monospace" SIZE=-1><I>networkpath</I></FONT>  (<FONT COLOR=Purple>new in version  1.1</FONT>).
<P>
This is analogous to entering the <FONT FACE="monospace" SIZE=-1>SUBST</FONT>  command at the command line.
<FONT FACE="monospace" SIZE=-1><I>networkpath</I></FONT>  should be a full pathname including the drive letter.
<P>
Note that such substitutions are global and immediately visible to other users on the same computer.
No special privileges are required (ie <FONT FACE="monospace" SIZE=-1>LocalSystem</FONT>  has sufficient authority to do this).
</DL> 
<!-- ---------------------------------------------- -->
<A NAME=srvstart_command ><H2 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 2 )</SCRIPT> Command </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 2 )</SCRIPT></H2 ></A> 
The command to run, <FONT FACE="monospace" SIZE=-1><I>program</I> [ <I>program_parameters</I> ]</FONT>  may be any executable program,
that is anything with extension <FONT FACE="monospace" SIZE=-1>.com</FONT>, <FONT FACE="monospace" SIZE=-1>.exe</FONT>  or <FONT FACE="monospace" SIZE=-1>.bat</FONT>.
<P>
<FONT FACE="monospace" SIZE=-1>program</FONT>  and <FONT FACE="monospace" SIZE=-1>program_parameters</FONT>  may refer to environment variables using the <FONT FACE="monospace" SIZE=-1>%var%</FONT>  syntax.
These will be substituted (not recursively) where encountered, for example
<FONT FACE="monospace" SIZE=-1>%HOME%\bin\mycommand.exe %SYSTEMROOT%</FONT>.
<P>
For command mode, if the -w flag is not supplied, the command can also be a DOS command (eg <FONT FACE="monospace" SIZE=-1>dir</FONT>).
<!-- ---------------------------------------------- -->
<A NAME=srvstart_parms ><H2 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 2 )</SCRIPT> Parameters </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 2 )</SCRIPT></H2 ></A> 
For command mode, parameters may include substitution text of the form:
<FONT FACE="monospace"><BLOCKQUOTE><PRE> 
{prompt}
{prompt:default}
</PRE></BLOCKQUOTE></FONT> 
Here, <FONT Color=Brown><B>SRVSTART</B></FONT>  displays the prompt on <FONT FACE="monospace" SIZE=-1>stdout</FONT>  and reads from <FONT FACE="monospace" SIZE=-1>stdin</FONT>,
substituting the entered text for everything between <FONT FACE="monospace" SIZE=-1>{</FONT>  and <FONT FACE="monospace" SIZE=-1>}</FONT>.
<P>
If the user just presses return, then <FONT FACE="monospace" SIZE=-1>default</FONT>  will be used (if supplied).
Either <FONT FACE="monospace" SIZE=-1>default</FONT>  or <FONT FACE="monospace" SIZE=-1>prompt</FONT>  can be empty strings.
<P>
If <FONT FACE="monospace" SIZE=-1>prompt</FONT>  or <FONT FACE="monospace" SIZE=-1>default</FONT>  include a space or other symbol meaningful to the NT "shell",
surround them in double-quotes.
<P>
If prompt begins with a <FONT FACE="monospace" SIZE=-1>-</FONT>  (hyphen) then the text entered by the user
will not be echoed back to the terminal (for passwords etc).
<P>
For example:
<FONT FACE="monospace"><BLOCKQUOTE><PRE> 
send_server.exe -s{server:MYSERV} -u{user name} -p{-password}
</PRE></BLOCKQUOTE></FONT> 
This will result in the following interaction:
<FONT FACE="monospace"><BLOCKQUOTE><PRE> 
server [MYSERV]: <I>enter server name here or press return for MYSERV</I>
user name: <I>no default</I>
password: <I>response will not be echoed to screen</I>
</PRE></BLOCKQUOTE></FONT> 
<!-- ---------------------------------------------- -->
<A NAME=srvstart_installremove ><H2 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 2 )</SCRIPT> Install and Remove Modes </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 2 )</SCRIPT></H2 ></A> 
You can use <FONT Color=Brown><B>SRVSTART</B></FONT>  itself to install or remove services that are based on the 
<FONT FACE="monospace" SIZE=-1>SRVSTART.EXE</FONT>  executable (<FONT COLOR=Purple>new in version  1.1</FONT>).
The syntax is as follows.
<OL>
<LI>To install a service which cannot interact with the desktop:
<FONT FACE="monospace"><BLOCKQUOTE><PRE> 
srvstart install <I>service_name</I> -c <I>controlfile</I>
</PRE></BLOCKQUOTE></FONT> 
<LI>To install a service which can interact with the desktop:
<FONT FACE="monospace"><BLOCKQUOTE><PRE> 
srvstart install_desktop <I>service_name</I> -c <I>controlfile</I>
</PRE></BLOCKQUOTE></FONT> 
<LI>To remove a service:
<FONT FACE="monospace"><BLOCKQUOTE><PRE> 
srvstart remove <I>service_name</I>
</PRE></BLOCKQUOTE></FONT> 
</OL>
The service which is installed has the following characteristics.
<UL>
<LI>Its short name and display name are both <FONT FACE="monospace" SIZE=-1><I>service_name</I></FONT>.
<LI>Its command line is as follows:
<FONT FACE="monospace"><BLOCKQUOTE><PRE> 
<I>path</I>\srvstart.exe svc <I>service_name</I> -c <I>controlfile</I>
</PRE></BLOCKQUOTE></FONT> 
where <FONT FACE="monospace" SIZE=-1><I>path</I>\srvstart.exe</FONT>  is the full path of the <FONT Color=Brown><B>SRVSTART</B></FONT>  executable.
<LI>It is set to Manual startup.
<LI>It starts using <FONT FACE="monospace" SIZE=-1>LocalSystem</FONT>  and has no dependencies.
<LI>If the <FONT FACE="monospace" SIZE=-1>install_desktop</FONT>  form is used, then the service can interact with the desktop.
</UL>
Note that the <FONT FACE="monospace" SIZE=-1>remove</FONT>  option will remove <I>any</I> service,
not just one installed using <FONT Color=Brown><B>SRVSTART</B></FONT> .
It does not prompt for confirmation.
<P>
As can be seen this support is quite simple - if you need more powerful management of services then consider using <FONT Color=Brown><B>SVC</B></FONT>.
<!-- ---------------------------------------------- -->
<A NAME=srvstart_bugs ><H2 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 2 )</SCRIPT> Bugs </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 2 )</SCRIPT></H2 ></A> 
There is no support at present for pausing or resuming the service.
<FONT Color=Brown><B>SRVSTART</B></FONT>  will ignore pause or resume requests from the Service Control Manager.
<P>
<FONT Color=Brown><B>SRVSTART</B></FONT>  does not extensively validate things supplied to it on the command line or in the control file.
A bad invocation can sometimes cause it to core dump.
<P>
<FONT Color=Brown><B>SRVSTART</B></FONT>  is pretty relaxed in its error-checking of things like <FONT FACE="monospace" SIZE=-1>new</FONT>.
Failure here should become obvious pretty quickly.
<P>
In command mode when the <FONT FACE="monospace" SIZE=-1>-w</FONT>  flag is not supplied,
it would be very useful if <FONT Color=Brown><B>SRVSTART</B></FONT>  changed the window title (so you could see it in the taskbar).
I can't work out how to do this.
<!-- ---------------------------------------------- -->
<A NAME=srvstart_hist ><H2 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 2 )</SCRIPT> Version History </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 2 )</SCRIPT></H2 ></A> 
<P><FONT COLOR=Green><B>Version  1.0  ( 31 March 2000 )</B></FONT><P> 
First release version.
(Rewritten as a DLL and executable in C++ from <FONT FACE="monospace" SIZE=-1>SYBSTART</FONT>  with some new functionality.)
<P><FONT COLOR=Green><B>Version  1.1  ( 30 June 2000 )</B></FONT><P> 
<UL>
<LI>
New install functionality
(keywords <FONT FACE="monospace" SIZE=-1>install</FONT> , <FONT FACE="monospace" SIZE=-1>install_desktop</FONT> , and <FONT FACE="monospace" SIZE=-1>remove</FONT>).
<LI>
<FONT FACE="monospace" SIZE=-1>svc</FONT>  keyword now optional (default).
<LI>
Environment substitution applied to all appropriate directives.
<LI>
Shut down by sending Windows message
(new directive <FONT FACE="monospace" SIZE=-1>shutdown_method={kill|command|winmessage}</FONT>)
<LI>
Truncate log file if first character is <FONT FACE="monospace" SIZE=-1>></FONT>  (greater than).
<LI>
New directive <FONT FACE="monospace" SIZE=-1>drive=<I>x</I>=<I>path</I></FONT>.
<LI>
New directive <FONT FACE="monospace" SIZE=-1>localdrive=<I>x</I>=<I>path</I></FONT>.
<LI>
With <FONT FACE="monospace" SIZE=-1>auto_restart=y</FONT> , does not restart if Windows is shutting down.
<LI>
By default, log messages to Event Log if <FONT FACE="monospace" SIZE=-1>svc</FONT>  mode,
and to <FONT FACE="monospace" SIZE=-1>stdout</FONT>  if <FONT FACE="monospace" SIZE=-1>install</FONT> , <FONT FACE="monospace" SIZE=-1>install_desktop</FONT> , or <FONT FACE="monospace" SIZE=-1>remove</FONT>  mode.
<LI>
Version information embedded in <FONT Color=Brown><B>SRVSTART</B></FONT>  executables (use <FONT FACE="monospace" SIZE=-1>strings</FONT>).
</UL>
<!-- =============================================================================================== -->
<A NAME=dll ><H1 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 1 )</SCRIPT> SRVSTART.DLL - Windows NT Service Support Library </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 1 )</SCRIPT></H1 ></A> 
The <FONT Color=Brown><B>SRVSTART</B></FONT>  DLL on its own provides all of the service management features of <FONT Color=Brown><B>SRVSTART</B></FONT>  to programs written in C++.
<P>
This allows you to write your own NT services, making just a few simple calls to manage the service's interactions with the SCM.
<!-- ---------------------------------------------- -->
<A NAME=dll_pre ><H2 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 2 )</SCRIPT> Pre-Requisites </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 2 )</SCRIPT></H2 ></A> 
The <FONT Color=Brown><B>SRVSTART</B></FONT>  library runs on Windows NT.
(Additionally, you can run <FONT Color=Brown><B>SRVSTART</B></FONT>  in <B>command mode only</B> on Windows 95/98.) 
To run it you require the following files somewhere in your PATH at runtime.
<UL>
<LI> <FONT FACE="monospace" SIZE=-1>srvstart.dll</FONT>  - <FONT Color=Brown><B>SRVSTART</B></FONT>  library
<LI> <FONT FACE="monospace" SIZE=-1>logger.dll</FONT>  - logger library
<LI> <FONT FACE="monospace" SIZE=-1>msvcrt.dll</FONT>  - Microsoft C++ run-time library
</UL>
At compile/link time, you will need the following:
<UL>
<LI> <FONT FACE="monospace" SIZE=-1>CmdRunner.h</FONT>  and/or <FONT FACE="monospace" SIZE=-1>ScmConnector.h</FONT>  - <FONT Color=Brown><B>SRVSTART</B></FONT>  header files
<LI> <FONT FACE="monospace" SIZE=-1>srvstart.lib</FONT>  - <FONT Color=Brown><B>SRVSTART</B></FONT>  library definitions
</UL>
All of these components are available from <A HREF= http://www.Nick.Rozanski.com/software.htm      >my website</A>.
<P>
Further information on building programs to use the DLL is given <A HREF= #dll_build >below</A>.
<!-- ---------------------------------------------- -->
<A NAME=dll_synopsis ><H2 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 2 )</SCRIPT> Synopsis </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 2 )</SCRIPT></H2 ></A> 
The <FONT Color=Brown><B>SRVSTART</B></FONT>  library exports the following classes.
<UL><LI>
<A HREF= #dll_CmdRunner ><FONT FACE="monospace" SIZE=-1>CmdRunner</FONT></A>  (defined in the header file <FONT FACE="monospace" SIZE=-1>CmdRunner.h</FONT>)
<LI>
<A HREF= #dll_ScmConnector ><FONT FACE="monospace" SIZE=-1>ScmConnector</FONT></A>  (defined in the header file <FONT FACE="monospace" SIZE=-1>ScmConnector.h</FONT>)
</UL>
<!-- ---------------------------------------------- -->
<A NAME=dll_CmdRunner ><H2 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 2 )</SCRIPT> Class: CmdRunner </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 2 )</SCRIPT></H2 ></A> 
<FONT FACE="monospace" SIZE=-1>CmdRunner</FONT>  is used to start an external program (command or service mode) within a defined environment.
<P>
The following examples show how to use <FONT FACE="monospace" SIZE=-1>CmdRunner</FONT>  to run a command in the same or another process.
<OL>
<LI>
Create a single object instance of the <FONT FACE="monospace" SIZE=-1>CmdRunner</FONT>  class.
<FONT FACE="monospace"><BLOCKQUOTE><PRE> 
_#include &lt;CmdRunner.h&gt;
<I>// typedef enum START_MODES { COMMAND_MODE, SERVICE_MODE, ANY_MODE };</I>
<I>// CmdRunner(START_MODES mode = COMMAND_MODE,char *nm = NULL) throw (SrvStartException);</I>

cmdRunner = new CmdRunner(CmdRunner::COMMAND_MODE,"MY_COMMAND");
</PRE></BLOCKQUOTE></FONT> 
It is invalid to create more than one <FONT FACE="monospace" SIZE=-1>CmdRunner</FONT>  object.
<P>
<LI>
Define the command to run, with any parameters.
<FONT FACE="monospace"><BLOCKQUOTE><PRE> 
#include &lt;CmdRunner.h&gt;
<I>// void setStartupCommand(const char *sc);</I>
<I>// void addStartupCommandArgument(const char *arg);</I>

cmdRunner->setStartupCommand("D:\bin\mycommand.exe");
cmdRunner->addStartupCommandArgument("arg1");
<I>// etc.</I>
</PRE></BLOCKQUOTE></FONT> 
<LI>
(Optional) define any required environment variables.
<FONT FACE="monospace"><BLOCKQUOTE><PRE> 
#include &lt;CmdRunner.h&gt;
<I>// void addEnv(const char *nm,const char *val) throw (SrvStartException);</I>

cmdRunner->addEnv("MYVAR","MYVALUE");
<I>// etc.</I>
</PRE></BLOCKQUOTE></FONT> 
<LI>
(Optional) set any other required attributes of the object.
<FONT FACE="monospace"><BLOCKQUOTE><PRE> 
#include &lt;CmdRunner.h&gt;
<I>// void setStartInNewWindow(bool nw);</I>
<I>// etc.</I>

cmdRunner->setStartInNewWindow(true);
<I>// etc.</I>
</PRE></BLOCKQUOTE></FONT> 
<LI>
Start.
<FONT FACE="monospace"><BLOCKQUOTE><PRE> 
#include &lt;CmdRunner.h&gt;
<I>// void start() throw (SrvStartException);</I>

cmdRunner->start();
</PRE></BLOCKQUOTE></FONT> 
<P>
<FONT FACE="monospace" SIZE=-1>start()</FONT>  blocks until the command has completed.
</OL>
<!-- ---------------------------------------------- -->
<A NAME=dll_ScmConnector ><H2 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 2 )</SCRIPT> Class: ScmConnector </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 2 )</SCRIPT></H2 ></A> 
<FONT FACE="monospace" SIZE=-1>ScmConnector</FONT>  is used to manage the interaction between a service program
and the Windows NT Service Control Manager.
<P>
The following examples show how to use <FONT FACE="monospace" SIZE=-1>ScmConnector</FONT>  in a service program.
<OL>
<LI>
Early on in your program, create a single object instance of the <FONT FACE="monospace" SIZE=-1>ScmConnector</FONT>  class.
<FONT FACE="monospace"><BLOCKQUOTE><PRE> 
#include &lt;ScmConnector.h&gt;
<I>// ScmConnector(char *svcName,bool allowConnectErrors = false) throw (SrvStartException)</I>;

scmConnector = new ScmConnector("MY_SERVICE");
</PRE></BLOCKQUOTE></FONT> 
It is invalid to create more than one <FONT FACE="monospace" SIZE=-1>ScmConnector</FONT>  object.
<P>
<LI>
Install a stop handler.
This will be activated by the <FONT FACE="monospace" SIZE=-1>ScmConnector</FONT>  if the service receives a STOP request from the Service Control Manager.
The three ways of doing this are described <A HREF= #dll_ScmConnector_stop >below</A>.
<P>
<LI>
Continue starting your service.
Once you have completed all of your startup tasks, notify the <FONT FACE="monospace" SIZE=-1>ScmConnector</FONT>  object that your service is running.
<FONT FACE="monospace"><BLOCKQUOTE><PRE> 
#include &lt;ScmConnector.h&gt;
<I>// void notifyScmStatus(SCM_STATUSES scmStatus,bool ignoreErrors = false) throw (SrvStartException);</I>

scmConnector->notifyScmStatus(ScmConnector::STATUS_RUNNING);
</PRE></BLOCKQUOTE></FONT> 
<LI>
When (if ever) your service is ready to terminate, notify the <FONT FACE="monospace" SIZE=-1>ScmConnector</FONT>  object.
<FONT FACE="monospace"><BLOCKQUOTE><PRE> 
#include &lt;ScmConnector.h&gt;

scmConnector->notifyScmStatus(ScmConnector::STATUS_STOPPING);
scmConnector->notifyScmStatus(ScmConnector::STATUS_STOPPED);

ExitProcess(...)
</PRE></BLOCKQUOTE></FONT> 
</OL>
<!-- ---------------------------------------------- -->
<A NAME=dll_ScmConnector_stop ><H3 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 3 )</SCRIPT> ScmConnector Stop Handlers </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 3 )</SCRIPT></H3 ></A> 
You must install a <I>stop handler</I>  for your <FONT FACE="monospace" SIZE=-1>ScmConnector</FONT>  object.
This will be activated by the <FONT FACE="monospace" SIZE=-1>ScmConnector</FONT>  if the service receives a STOP request from the Service Control Manager.
If you don't do this then it will not be possible for the Service Control Manager to stop your service.
<P>
There are three ways to do this.
<P>
<UL>
<LI>
Pass the address of a Boolean variable to the <FONT FACE="monospace" SIZE=-1>ScmConnector</FONT>.
If a STOP request is received, the <FONT FACE="monospace" SIZE=-1>ScmConnector</FONT>  will set this variable to <FONT FACE="monospace" SIZE=-1>true</FONT>.
<FONT FACE="monospace"><BLOCKQUOTE><PRE> 
#include &lt;ScmConnector.h&gt;
<I>// void installStopCallback(bool *stopRequestedVar) throw (SrvStartException);</I>

bool stopRequested;
scmConnector->installStopCallback(&stopRequested);</I>

<I> // later ... </I>
if (stopRequested) ...
</PRE></BLOCKQUOTE></FONT> 
<P>
If you select this method,
then you will typically poll the variable regularly to see if it has been set to <FONT FACE="monospace" SIZE=-1>true</FONT>,
and if it has, shut down.
<P>
<LI>
Pass the address of a Win32 event handle (you must create the event yourself).
If a STOP request is received, the <FONT FACE="monospace" SIZE=-1>ScmConnector</FONT>  will signal this event.
<FONT FACE="monospace"><BLOCKQUOTE><PRE> 
#include &lt;ScmConnector.h&gt;
<I> // void installStopCallback(HANDLE *stopRequestedEvent) throw (SrvStartException);</I>

HANDLE stopEvent = CreateEvent(NULL,FALSE,FALSE,NULL);
scmConnector->installStopCallback(&stopEvent);</I>

<I> // later ... </I>
WaitForSingleObject(stopEvent,...
</PRE></BLOCKQUOTE></FONT> 
<P>
If you select this method,
you will typically poll the event regularly (or maybe wait on it) to see if it has been signalled,
and if it has, shut down.
<P>
<LI>
Pass the address of a static function.
If a STOP request is received, the <FONT FACE="monospace" SIZE=-1>ScmConnector</FONT>  will invoke this function,
passing a supplied pointer (which you supply when you install the callback).
Note that the function is invoked <I>asynchronously</I> in a <I>separate</I> thread.
<FONT FACE="monospace"><BLOCKQUOTE><PRE> 
#include &lt;ScmConnector.h&gt;
<I> // typedef void STOP_HANDLER_FUNCTION(void*);</I>
<I> // void installStopCallback(STOP_HANDLER_FUNCTION *stopRequestedFunction,
void *genericPointer) throw (SrvStartException);</I>

<I> // define the function </I>
void stopCallbackFunction(void *genericPointer) { ... }

scmConnector->installStopCallback(&stopCallbackFunction,
static_cast&lt;void*&gt;(this));</I>
</PRE></BLOCKQUOTE></FONT> 
<P>
If you select this method,
your passed function must shut down the service itself.
</UL>
<P>
Whichever method you choose, you must ensure that if the callback is activated,
your service program will shut itself down.
<P>
<!-- ---------------------------------------------- -->
<A NAME=dll_timing ><H2 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 2 )</SCRIPT> Timing </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 2 )</SCRIPT></H2 ></A> 
Timing is crucial with service programs.
In particular, the program must connect to the SCM within one second of startup,
or Windows NT assumes it is invalid.
<P>
To ensure this, you should make sure that you create the <FONT FACE="monospace" SIZE=-1>ScmConnector</FONT>  object
early in your program (preferably right at the start).
Once you do this, <FONT FACE="monospace" SIZE=-1>ScmConnector</FONT>  will make the appropriate status notifications
to the Service Control Manager for you.
<P>
Furthermore, a service program must respond promptly to requests from the Service Control Manager
(specifically, "interrogate" and "stop" requests).
<FONT FACE="monospace" SIZE=-1>ScmConnector</FONT>  handles this for you automatically once it has been instantiated.
It runs in its own thread (two threads, actually) and you do not need to take any special actions
other than to notify it when your status changes (when you are shutting down).
<P>
These constraints aside, there are no restrictions on the time that a service can take to start or stop.
However <FONT FACE="monospace" SIZE=-1>ScmConnector</FONT>  will log an informational message if startup takes more than a minute.
<!-- ---------------------------------------------- -->
<A NAME=dll_exceptions ><H2 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 2 )</SCRIPT> Exception Handling </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 2 )</SCRIPT></H2 ></A> 
In general, methods respond to errors by raising a C++ exception.
All methods which can throw an exception are defined using the following syntax:
<FONT FACE="monospace"><BLOCKQUOTE><PRE> 
<I>class</I>::<I>method</I>(<I>parameters...</I>) throw (SrvStarterException);
</PRE></BLOCKQUOTE></FONT> 
This syntax is not supported by Microsoft C++ (they claim it is non-standard)
but I have included it to denote the methods which can throw exceptions.
Note that most constructors fall into this category.
<P>
All exceptions are of class <FONT FACE="monospace" SIZE=-1>SrvStart::SrvStarterException</FONT>, defined in <FONT FACE="monospace" SIZE=-1>SrvStart.h</FONT>.
(<FONT FACE="monospace" SIZE=-1>SrvStart</FONT>  is the namespace here.)
Some of the key public data members of this class include:
<FONT FACE="monospace"><BLOCKQUOTE><PRE> 
SRVSTART_EXCEPTION exceptionId;
char               className[SRVSTART_EXCEPTION_STRING_SIZE];
char               methodName[SRVSTART_EXCEPTION_STRING_SIZE];
char               errorMessage[SRVSTART_EXCEPTION_STRING_SIZE];
char               sourceFile[SRVSTART_EXCEPTION_STRING_SIZE];
int                lineNumber;
</PRE></BLOCKQUOTE></FONT> 
Your calling program should catch these exceptions and interrogate the thrown object for further information.
<!-- ---------------------------------------------- -->
<A NAME=dll_any ><H2 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 2 )</SCRIPT> "Any" Mode </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 2 )</SCRIPT></H2 ></A> 
The library implements <A HREF= #srvstart_operation_note ><FONT FACE="monospace" SIZE=-1>any</FONT>  mode</A>  as follows.
<P>
When creating your <FONT FACE="monospace" SIZE=-1>ScmConnector</FONT>  object, set the paramter <FONT FACE="monospace" SIZE=-1>allowConnectErrors</FONT>  to true.
Then check the status of the service.
<FONT FACE="monospace"><BLOCKQUOTE><PRE> 
#include &lt;ScmConnector.h&gt;
<I> // typedef enum SCM_STATUSES { STATUS_INITIALISING,STATUS_STARTING,</I>
<I> // STATUS_RUNNING,STATUS_STOPPING,STATUS_STOPPED,</I>
<I> // STATUS_MUST_START_AS_CONSOLE,STATUS_FAILED };</I>
<I> // SCM_STATUSES getScmStatus();</I>

ScmConnector::SCM_STATUSES status = scmConnector->getScmStatus();
</PRE></BLOCKQUOTE></FONT> 
If <FONT FACE="monospace" SIZE=-1>status</FONT>  is <FONT FACE="monospace" SIZE=-1>STATUS_MUST_START_AS_CONSOLE</FONT>  then
the <FONT FACE="monospace" SIZE=-1>ScmConnector</FONT>  failed to connect to the Service Control Manager.
No exception will be raised in this case.
<!-- ---------------------------------------------- -->
<A NAME=dll_build ><H2 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 2 )</SCRIPT> Build </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 2 )</SCRIPT></H2 ></A> 
The following should be taken into account when building software using the DLL.
<UL>
<LI>
All classes are defined within the namespace <FONT FACE="monospace" SIZE=-1>SrvStart</FONT>.
If you don't want to refer to this namespace directly,
then include the following:
<FONT FACE="monospace"><BLOCKQUOTE><PRE> 
using namespace SrvStart;
</PRE></BLOCKQUOTE></FONT> 
<LI>
You will need to <FONT FACE="monospace" SIZE=-1>#include</FONT>  the appropriate header file
(<FONT FACE="monospace" SIZE=-1>CmdRunner.h</FONT>  or <FONT FACE="monospace" SIZE=-1>ScmConnector.h</FONT>) for compilation.
<LI>
To be compatible with the DLL,
you <B>must</B> set the <FONT FACE="monospace" SIZE=-1>/MD</FONT>  option for the compiler (Runtime Multithread DLL).
From the GUI, select Build|Settings|C++|Code Generation,
Use run-time library "Multithread DLL."
<LI>
For the linker,
you will need to add <FONT FACE="monospace" SIZE=-1>srvstart.lib</FONT>  to the list of library modules.
</UL>
If you want to include debug code in your service then why not use my <FONT FACE="monospace" SIZE=-1>logger.dll</FONT>?
This provides a simple interface for logging error, information and debug messages
to a variety of targets including <FONT FACE="monospace" SIZE=-1>stdout</FONT> , text files or
the Windows NT Event Log.
Check out <A HREF= http://www.Nick.Rozanski.com/software.htm      >my website</A>  for details.
<!-- ---------------------------------------------- -->
<A NAME=dll_bugs ><H2 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 2 )</SCRIPT> Bugs </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 2 )</SCRIPT></H2 ></A> 
There is no support at present for pausing or resuming the service.
<FONT FACE="monospace" SIZE=-1>ScmConnector</FONT>  will ignore pause or resume requests from the Service Control Manager.
<!-- ---------------------------------------------- -->
<A NAME=dll_hist ><H2 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 2 )</SCRIPT> Version History </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 2 )</SCRIPT></H2 ></A> 
<P><FONT COLOR=Green><B>Version  1.0  ( 31 March 2000 )</B></FONT><P> 
First release version.
(Rewritten as a DLL and executable in C++ from <FONT FACE="monospace" SIZE=-1>SYBSTART</FONT>  with some new functionality.)
<P><FONT COLOR=Green><B>Version  1.1  ( 30 June 2000 )</B></FONT><P> 
Enhanced existing classes, and created simple new class <FONT FACE="monospace" SIZE=-1>ServiceManager</FONT> ,
to support new functionality described <A HREF= #srvstart_hist >above</A>.
<!-- =============================================================================================== -->
<A NAME=source ><H1 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 1 )</SCRIPT> Source </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 1 )</SCRIPT></H1 ></A> 
<FONT Color=Brown><B>SVC</B></FONT>  and <FONT Color=Brown><B>SRVSTART</B></FONT>  are issued under the terms of the
<A HREF= http://www.gnu.org   >GNU General Public License</A>.
<P>
<FONT Color=Brown><B>SVC</B></FONT>  and <FONT Color=Brown><B>SRVSTART</B></FONT>  are built using Microsoft Visual C++.
I have not used any non-standard features (as far as I am aware)
so the source should compile under any C++ compiler for Windows NT.
(I haven't tried this.)
<P>
Full source code for the executables and DLL is available.
<!-- =============================================================================================== -->
<A NAME=support ><H1 ><SCRIPT LANGUAGE=JAVASCRIPT>headStart( 1 )</SCRIPT> Support </A><SCRIPT LANGUAGE=JAVASCRIPT>headEnd( 1 )</SCRIPT></H1 ></A> 
I welcome feedback and comments on these programs.
<P>
You can email me (<A HREF= mailto:Nick@Rozanski.com   >mailto:Nick@Rozanski.com</A>) for support,
although I can't guarantee to give any.
<P>
Please note that the Sybase features in <FONT Color=Brown><B>SVC</B></FONT>  and <FONT Color=Brown><B>SRVSTART</B></FONT>  are only included for backwards compatibility
and may not be maintained in the future.
(I have now left Sybase.)
<P></BLOCKQUOTE><HR SIZE=2> <TABLE WIDTH=100% BORDER=0> <TD WIDTH=60% ALIGN=LEFT> <FONT FACE="sans-serif" SIZE= -2  COLOR="Green"> <I>  URL: <A HREF=  http://www.Nick.Rozanski.com/services.htm     >http://www.Nick.Rozanski.com/services.htm</A>   (last updated 2000-08-25_11:12:21) </I></FONT>  <TD WIDTH=40% ALIGN=RIGHT> <FONT FACE="sans-serif" SIZE= -2  COLOR="Green"> <I>  produced on <A HREF= http://sourceware.cygnus.com/cygwin    >Cygwin32</A>  using <A HREF= mkhtml.htm   >mkhtml</A>  </I></FONT>  <TR> </TABLE>  
